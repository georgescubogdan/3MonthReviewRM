// <auto-generated />
using System;
using CoreDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreDatabase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("ContrAllStudioManagementBackend.Models.FormulaModel", b =>
                {
                    b.Property<int>("FormulaModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Deletable");

                    b.Property<string>("Description");

                    b.Property<string>("Formula");

                    b.Property<string>("Name");

                    b.Property<string>("Priority");

                    b.HasKey("FormulaModelId");

                    b.ToTable("FormulaModels");
                });

            modelBuilder.Entity("ContrAllStudioManagementBackend.Models.LegalDay", b =>
                {
                    b.Property<int>("LegalDayID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<string>("Name");

                    b.HasKey("LegalDayID");

                    b.ToTable("LegalDays");
                });

            modelBuilder.Entity("ContrAllStudioManagementBackend.Models.SRModel", b =>
                {
                    b.Property<int>("SRModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Deletable");

                    b.Property<string>("Description");

                    b.Property<string>("Formula");

                    b.Property<short>("IsSpor");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.HasKey("SRModelId");

                    b.ToTable("SRModels");
                });

            modelBuilder.Entity("ContrAllStudioManagementBackend.Models.UpdatesModel", b =>
                {
                    b.Property<int>("UpdatesModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FormulaUpdateTime");

                    b.Property<DateTime>("LegalDaysUpdateTime");

                    b.Property<DateTime>("SRUpdateTime");

                    b.Property<DateTime>("SubDomainsUpdateTime");

                    b.HasKey("UpdatesModelId");

                    b.ToTable("UpdatesModels");
                });

            modelBuilder.Entity("CoreModels.Models.ClientModel", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Ail");

                    b.Property<short>("Asf");

                    b.Property<string>("City");

                    b.Property<short>("Con");

                    b.Property<string>("County");

                    b.Property<short>("Imp");

                    b.Property<string>("Name");

                    b.Property<short>("Reg");

                    b.Property<short>("Sal");

                    b.Property<short>("Vmg");

                    b.HasKey("ClientId");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("CoreModels.Models.Clocking", b =>
                {
                    b.Property<int>("ClockingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DateId");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("ClockingId");

                    b.HasIndex("DateId");

                    b.ToTable("Clockings");
                });

            modelBuilder.Entity("CoreModels.Models.Date", b =>
                {
                    b.Property<int>("DateId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CurrentDate");

                    b.Property<int>("Hours");

                    b.Property<int>("Minutes");

                    b.Property<int>("Seconds");

                    b.Property<int>("UserId");

                    b.HasKey("DateId");

                    b.HasIndex("UserId");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("CoreModels.Models.IbanModel", b =>
                {
                    b.Property<int>("IbanModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FinanceSource");

                    b.Property<string>("Formula");

                    b.Property<string>("Iban");

                    b.Property<int>("ProfileModelId")
                        .HasColumnName("Profile_ProfileModelId");

                    b.HasKey("IbanModelId");

                    b.HasIndex("ProfileModelId");

                    b.ToTable("IbanModels");
                });

            modelBuilder.Entity("CoreModels.Models.ProfileModel", b =>
                {
                    b.Property<int>("ProfileModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("SubDomainId")
                        .HasColumnName("SubDomain_SubDomainId");

                    b.HasKey("ProfileModelId");

                    b.HasIndex("SubDomainId");

                    b.ToTable("ProfileModels");
                });

            modelBuilder.Entity("CoreModels.Models.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CoreModels.Models.SubDomainModel", b =>
                {
                    b.Property<int>("SubDomainId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AngCode");

                    b.Property<string>("AngId");

                    b.Property<string>("Code");

                    b.Property<short>("Enable");

                    b.Property<string>("Name");

                    b.HasKey("SubDomainId");

                    b.ToTable("SubDomainModels");
                });

            modelBuilder.Entity("CoreModels.Models.TaskModel", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("TaskStateID");

                    b.HasKey("TaskID");

                    b.HasIndex("TaskStateID");

                    b.ToTable("TaskModels");
                });

            modelBuilder.Entity("CoreModels.Models.TaskStateModel", b =>
                {
                    b.Property<int>("TaskStateID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("OrderNr");

                    b.HasKey("TaskStateID");

                    b.ToTable("TaskStateModels");
                });

            modelBuilder.Entity("CoreModels.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<short>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<short>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<short>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("ShouldGetPassword");

                    b.Property<short>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoreModels.Models.UserRoleModel", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleModelId");

                    b.Property<int?>("UserModelId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CoreModels.Models.UserTaskModel", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("TaskId");

                    b.HasKey("UserID", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTaskModels");
                });

            modelBuilder.Entity("CoreModels.Models.VacationDayModel", b =>
                {
                    b.Property<int>("VacationDayID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("From");

                    b.Property<string>("Reason");

                    b.Property<short>("State");

                    b.Property<DateTime>("To");

                    b.Property<int>("UserId");

                    b.HasKey("VacationDayID");

                    b.HasIndex("UserId");

                    b.ToTable("VacationDays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoreModels.Models.Clocking", b =>
                {
                    b.HasOne("CoreModels.Models.Date", "Date")
                        .WithMany("Clockings")
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.Date", b =>
                {
                    b.HasOne("CoreModels.Models.UserModel", "User")
                        .WithMany("Date")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.IbanModel", b =>
                {
                    b.HasOne("CoreModels.Models.ProfileModel", "Profile")
                        .WithMany("Ibans")
                        .HasForeignKey("ProfileModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.ProfileModel", b =>
                {
                    b.HasOne("CoreModels.Models.SubDomainModel", "SubDomain")
                        .WithMany("Profiles")
                        .HasForeignKey("SubDomainId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.TaskModel", b =>
                {
                    b.HasOne("CoreModels.Models.TaskStateModel", "TaskState")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.UserRoleModel", b =>
                {
                    b.HasOne("CoreModels.Models.RoleModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreModels.Models.RoleModel", "RoleModel")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleModelId");

                    b.HasOne("CoreModels.Models.UserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreModels.Models.UserModel", "UserModel")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("CoreModels.Models.UserTaskModel", b =>
                {
                    b.HasOne("CoreModels.Models.TaskModel", "TaskModel")
                        .WithMany("UserTask")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreModels.Models.UserModel", "UserModel")
                        .WithMany("UserTask")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreModels.Models.VacationDayModel", b =>
                {
                    b.HasOne("CoreModels.Models.UserModel", "User")
                        .WithMany("VacationDays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CoreModels.Models.RoleModel")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CoreModels.Models.UserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CoreModels.Models.UserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CoreModels.Models.UserModel")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
